사용법
./twc 소스파일
ex)./twc winter_oath


_____|____|/_/X|\__|__/_____|____|/_\_|
_________________|\|/|___|_|_________|_
_________|___|_|_|/|\|___|_|_________|_
_________|__||__/__|__\__|_|_________|_
4x39행령 위에 코딩을 하되

1.[_, /, \, X]를 base로 각 값은 0~9, a~z, A~Z에 대응한다.

2.|로 각 값과 연산자를 구분한다.

3.|를 기준으로 왼쪽의 문자열이 값과 연산자를 의미한다.

4. 17열~23열을 gate라고 칭하고 gate 좌우를 wall이라고 한다.
[____|____|____|
________________
_________|_/_|__
_________|_X||__	<--좌측 wall(1열~16열) 첫 행 1열에 '['가 올 수 있다.
\__|__/
_|\|/|_
_|/|\|_
/__|__\		<--gate(17열~23열)
_____|____|____|
__|_|\__________
__|_|_/_/_______
__|_|_\________]	<--우측 wall(24열~40열) 마지막행 40열에 ']'가 올 수 있다.

5.연산은 postfix, infix(미구현) 방식을 취하며, 단항 연산일 연산자 기준 바로 좌측 항을 우선한다.

6.행별로 좌우의 wall 마다 각각 하나의 연산을 수행할 수 있으며, 이 경우 postfix방식이다.

7.1행,4행 gate의 18, 19, 21, 22열에 임의의 base 문자를 입력할 수 있다.
이를 연산자로 하고, 좌우 wall에 각각 값을 하나씩 입력하면 입력 값을 항으로해서  infix로 연산할 수 있다.(미구현)

8.
'['(여는 대괄호)과 ']'(닫는 대괄호)은 brain fuck의 그것과 같은 기능이다.
단, 사용 시 각각 wall의 가장 처음과 끝에 와야한다.
'[':	포인터가 가리키는 바이트의 값이 0이 되면 짝이 되는 ]로 이동한다. 의사코드로는 while(*ptr != 0) {...} 이다.
']':	포인터가 가리키는 바이트의 값이 0이 아니면 짝이 되는 [로 이동한다.

9.
p is (char *)
number		code	description
i: 0		_		0
i: 1		/		1
i: 2		\		2
i: 3		X		3
i: 4		/_		4
i: 5		//		5
i: 6		/\		6
i: 7		/X		7
i: 8		\_		8
i: 9		\/		9
i: 10		\\		a
i: 11		\X		b
i: 12		X_		c
i: 13		X/		d
i: 14		X\		e
i: 15		XX		f
i: 16		/__		g
i: 17		/_/		h
i: 18		/_\		i
i: 19		/_X		j
i: 20		//_		k
i: 21		///		l
i: 22		//\		m
i: 23		//X		n
i: 24		/\_		o
i: 25		/\/		p
i: 26		/\\		q
i: 27		/\X		r
i: 28		/X_		s
i: 29		/X/		t
i: 30		/X\		u
i: 31		/XX		v
i: 32		\__		w
i: 33		\_/		x
i: 34		\_\		y
i: 35		\_X		z
i: 36		\/_		A
i: 37		\//		B
i: 38		\/\		C
i: 39		\/X		D
i: 40		\\_		E
i: 41		\\/		F
i: 42		\\\		G
i: 43		\\X		H
i: 44		\X_		I
i: 45		\X/		J
i: 46		\X\		K
i: 47		\XX		L
i: 48		X__		M
i: 49		X_/		N
i: 50		X_\		O
i: 51		X_X		P
i: 52		X/_		Q
i: 53		X//		R
i: 54		X/\		S
i: 55		X/X		T
i: 56		X\_		U
i: 57		X\/		V
i: 58		X\\		W
i: 59		X\X		X
i: 60		XX_		Y
i: 61		XX/		Z
i: 62		XX\		print *p
i: 63		XXX		print p address
i: 64		/___	print right operand
i: 65		/__/	print left operand
i: 66		/__\	*p++
i: 67		/__X	*p--
i: 68		/_/_	p++
i: 69		/_//	p--
i: 70		/_/\	*p = right operand
i: 71		/_/X	print "Winter Is Coming"
i: 72		/_\_	print the nigth's watch oath
i: 73		/_\/
i: 74		/_\\
i: 75		/_\X
i: 76		/_X_
i: 77		/_X/
i: 78		/_X\
i: 79		/_XX

